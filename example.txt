# SSH access and a key-pair to access the instance
# Generate new private key
resource "tls_private_key" "my_key" {
  algorithm = "RSA"
}

# Generate a key-pair with above key
resource "aws_key_pair" "deployer" {
  key_name   = "gid-${var.env}-${var.project}-key"
  public_key = tls_private_key.my_key.public_key_openssh
}

locals {
  base_user_data = <<-EOF
  #cloud-config
  package_upgrade: true
  package_reboot_if_required: true

  ssh_authorized_keys:
    - ${tls_private_key.my_key.public_key_openssh}

  EOF

  # cloud-init 19.3 does not support NFS mounts via mounts directive.
  efs_mount_user_data = var.use_home_efs == false ? "" : <<-EOF
  runcmd:
    - echo '${aws_efs_file_system.my-efs[0].dns_name}:/ /home nfs4 defaults,vers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0' >> /etc/fstab
    - [ mv, /home, /tmp/home ]
    - [ mkdir, /home ]
    - [ mount, -t, nfs4, -o, "nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport", "${aws_efs_file_system.my-efs[0].dns_name}:/", /home ]
    - [ rsync, -az, /tmp/home/, /home ]
    - [ rm, -fr, /tmp/home ]

  EOF

  user_data = "${local.base_user_data}${local.efs_mount_user_data}"
}

resource "aws_efs_file_system" "my-efs" {
  count            = var.use_home_efs == true ? 1 : 0
  creation_token   = "${var.env}-${var.project}-home-efs"
  performance_mode = "generalPurpose"
  encrypted        = "true"
  tags = {
    Name = var.env
  }
}

resource "aws_efs_mount_target" "mount" {
  count           = var.use_home_efs == true ? 1 : 0
  file_system_id  = aws_efs_file_system.my-efs[count.index].id
  subnet_id       = var.subnet_id
  security_groups = concat([aws_security_group.efs.id], var.custom_efs_security_groups_ids)
}

data "aws_ami" "amazon-linux-2" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = [var.ami_name]
  }
}

resource "aws_instance" "server" {
  ami                    = data.aws_ami.amazon-linux-2.id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.deployer.key_name
  subnet_id              = var.subnet_id
  depends_on             = [aws_efs_mount_target.mount]
  vpc_security_group_ids = concat([aws_security_group.server.id], var.custom_ec2_security_groups_ids)

  root_block_device {
    volume_size = var.root_disk_size
    encrypted   = true
  }

  user_data = var.custom_user_data != "" ? var.custom_user_data : local.user_data

  tags = {
    Name = "gid-${var.env}-${var.project}"
    Env  = var.env
  }
}

resource "aws_security_group" "efs" {
  name        = "gid-${var.env}-${var.project}-efs"
  description = "Security Group controlling access to the EFS mount."
  vpc_id      = var.vpc_id

  ingress {
    from_port       = 2049
    to_port         = 2049
    protocol        = "tcp"
    security_groups = concat([aws_security_group.server.id], var.custom_efs_security_groups_ids)
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}

resource "aws_security_group" "server" {
  name        = "gid-${var.env}-${var.project}"
  description = "Default EC2 Security group with open SSH port."
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}

resource "aws_eip_association" "eip_assoc" {
  instance_id   = aws_instance.server.id
  allocation_id = aws_eip.server-eip.id
}

resource "aws_eip" "server-eip" {
  vpc = true

  tags = {
    Name = var.project
    Env  = var.env
  }
}

data "aws_route53_zone" "instance" {
  count = var.domain_name != "" ? 1 : 0
  name  = var.domain_name
}

resource "aws_route53_record" "instance" {
  count   = var.host_name != "" && var.domain_name != "" ? 1 : 0
  zone_id = data.aws_route53_zone.instance[0].zone_id
  name    = "${var.host_name}.${var.domain_name}"
  type    = "A"
  ttl     = "300"
  records = [aws_eip.server-eip.public_ip]
}




##########################################
variable
#################################################


# Variables TF File
variable "region" {
  description = "AWS Region to spin up the instance in."
  default     = "us-east-1"
}

variable "project" {
  default = "ec2-server"
}

variable "ami_name" {
  description = "AMI name to be used for the instance. It's expected to support cloud-init 19.3."
  default     = "amzn2-ami-hvm-2.0.20210126.0-x86_64-gp2"
}

variable "instance_type" {
  description = "Instance Type to be used for instance."
  default     = "t3.micro"
}

variable "root_disk_size" {
  description = "Size of EBS root disk."
  default     = "10"
}

variable "subnet_id" {
  description = "Subnet ID to be used for instance."
}

variable "vpc_id" {
  description = "VPC to be launch the instance in."
}

variable "env" {
  description = "Environment type"
  default     = "poc"
}

variable "domain_name" {
  description = "Domain name for the DNS endpoint for the instance. Make sure you don't overwrite something that already exists."
  default     = ""
}

variable "host_name" {
  description = "hostname for the server. It will be used for DNS record, $${host_name}.$${domain_name}."
  default     = ""
}

variable "use_home_efs" {
  description = "Enable EFS drive for the /home partition. This way your /home data will pesist across reboots and AMI upgrades."
  default     = false
}

variable "custom_efs_security_groups_ids" {
  description = "Extra security groups that will be used for the EFS mount. Not common."
  type        = list(any)
  default     = []
}

variable "custom_ec2_security_groups_ids" {
  description = "Add extra security groups to the instance."
  type        = list(any)
  default     = []
}

variable "custom_user_data" {
  default = ""
}


################################
output.tf
###################################


output "instance_id" {
  description = "Instance ID of the instance"
  value       = aws_instance.server.id
}

output "ec2_server_eip" {
  description = "Public IP of the instance"
  value       = aws_eip.server-eip.public_ip
}

output "efs_id" {
  description = "EFS id of the Elastic filesystem"
  value       = var.use_home_efs == true ? aws_efs_file_system.my-efs.*.id : null
}

output "private_key" {
  description = "Key of the ec2 instance "
  value       = tls_private_key.my_key.private_key_pem
}
